#!/bin/sh
# AGiXT backend entrypoint (for per-instance start.sh)
# Env expected (set by the Shepherd service):
#   AGIXT_DIR_REL, AGIXT_GIT_URL, AGIXT_GIT_BRANCH (may be empty)
#   AGIXT_CREDENTIALS_FILE, AGIXT_BASE_URI

set -eu

# Ensure a sane PATH even if Shepherd replaced env
: "${PATH:=$HOME/.guix-home/profile/bin:$HOME/.guix-home/profile/sbin:$HOME/.guix-profile/bin:$HOME/.guix-profile/sbin:/run/current-system/profile/bin:/run/current-system/profile/sbin}"
export PATH

# Prefer wheels; avoid building native extensions
export PIP_PREFER_BINARY=1

resolve_path() {
  case "${1:-}" in
    /*) printf '%s\n' "$1" ;;
    ~/*) eval "printf '%s\n' $1" ;;
    *)  printf '%s\n' "$HOME/$1" ;;
  esac
}

: "${AGIXT_DIR_REL:?missing AGIXT_DIR_REL}"
: "${AGIXT_GIT_URL:?missing AGIXT_GIT_URL}"
: "${AGIXT_CREDENTIALS_FILE:?missing AGIXT_CREDENTIALS_FILE}"
: "${AGIXT_BASE_URI:=http://localhost:7437}"
AGIXT_GIT_BRANCH="${AGIXT_GIT_BRANCH:-}"

DIR="$(resolve_path "$AGIXT_DIR_REL")"
CRED="$(resolve_path "$AGIXT_CREDENTIALS_FILE")"
VENV="$DIR/.venv"


# Recreate venv if it looks broken
if [ ! -x "$VENV/bin/python3" ]; then
  umask 022
  python -m venv "$VENV" 2>/dev/null || python3 -m venv "$VENV"
fi

PY="$VENV/bin/python"
PIP="$PY -m pip"

mkdir -p "$DIR"

# Clone or update
if [ ! -d "$DIR/.git" ]; then
  echo "[agixt] cloning $AGIXT_GIT_URL into $DIR"
  rm -rf "$DIR"
  git clone "$AGIXT_GIT_URL" "$DIR"
fi
cd "$DIR"

echo "[agixt] updating repo in $DIR"
  
git pull --ff-only || true

# Optional explicit branch
if [ -n "$AGIXT_GIT_BRANCH" ]; then
  git checkout --quiet "$AGIXT_GIT_BRANCH"
fi

# --- BEGIN: patch outdated pins in requirements.txt ---
if [ -f requirements.txt ]; then
  # bump docx2txt pin: 0.8 -> 0.9 (0.8 is gone from PyPI)
  if grep -qE '^docx2txt==0\.8(\s|$)' requirements.txt; then
    echo "[agixt] patching requirements: docx2txt 0.8 -> 0.9"
    sed -i 's/^docx2txt==0\.8/docx2txt==0.9/' requirements.txt
  fi
fi
# --- END: patch ---

${PIP} install --upgrade pip wheel

# Install requirements (repo-provided)
if [ -f requirements.txt ]; then
  ${PIP} install -r requirements.txt
fi

# --- Ensure spaCy + model (AGiXT Memories depends on it) ---
# Prefer wheels; we already set PIP_PREFER_BINARY=1 earlier.
# Do NOT set PIP_ONLY_BINARY=:all: here, spaCy deps may need sdists occasionally.
if ! "$PY" - <<'PYEOF'
import importlib
raise SystemExit(0 if importlib.util.find_spec("spacy") else 1)
PYEOF
then
  echo "[agixt] installing spaCy"
  $PIP install "spacy<3.8"
fi

# Make sure an English model is present
if ! "$PY" - <<'PYEOF'
import importlib
raise SystemExit(0 if (importlib.util.find_spec("en_core_web_sm") or
                       importlib.util.find_spec("en_core_web_md") or
                       importlib.util.find_spec("en_core_web_lg")) else 1)
PYEOF
then
  echo "[agixt] downloading spaCy English model (sm)"
  "$PY" -m spacy download en_core_web_sm || {
    echo "[agixt] model download failed; trying explicit wheel for 3.7.1"
    "$VENV/bin/pip" install \
      https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.7.1/en_core_web_sm-3.7.1-py3-none-any.whl
  }
fi

# --- Ensure textacy (required by Memories) ---
if ! "$PY" - <<'PYEOF'
import importlib
raise SystemExit(0 if importlib.util.find_spec("textacy") else 1)
PYEOF
then
  echo "[agixt] installing textacy"
  # textacy<0.14 supports spaCy 3.x and Python 3.11
  $PIP install "textacy<0.14"
fi

# Load secrets (NOT managed by Guix)
if [ ! -f "$CRED" ]; then
  echo "[agixt] missing credentials file: $CRED" >&2
  exit 1
fi
# shellcheck disable=SC1090
. "$CRED"

# Ensure required secrets exist
: "${AGIXT_API_KEY:?Set AGIXT_API_KEY in $CRED}"

# Export for the child process
export AGIXT_API_KEY
export AGIXT_BASE_URI

# Launch
if [ -d agixt ]; then
  cd agixt
fi

echo "[agixt] starting backend at ${AGIXT_BASE_URI}"
exec ${PY} -u run-local.py
